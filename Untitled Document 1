// // const fs = require("fs");
// // const ExcelJS = require("exceljs");

// // const outputPath = "./Job-hustle2.xlsx";
// // if (!fs.existsSync(outputPath)) {
// //   console.error("‚ùå File not found:", outputPath);
// //   process.exit(1);
// // }
// // console.log("‚úÖ File found:", outputPath);

// // async function readExcel() {
// //   const workbook = new ExcelJS.Workbook();
// //   await workbook.xlsx.readFile(outputPath);

// //   const sheet = workbook.worksheets[0]; 
// //   console.log("üìñ Reading sheet:", sheet.name);

// //   const startRow = 50;
// //   const endRow = 100;

// //   for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {
// //     const row = sheet.getRow(rowIndex);
// //     let hasColor = false;
// //     let rowText = `Row ${rowIndex}: `;

// //     for (let colIndex = 1; colIndex <= 4; colIndex++) {
// //       const cell = row.getCell(colIndex);
// //       const value = cell.value || "(empty)";
// //       rowText += `Col ${colIndex}: ${value} | `;

// //       const fill = cell.fill;
// //       if (fill && fill.fgColor && fill.fgColor.argb !== "FFFFFFFF") {
// //         hasColor = true;
// //       }
// //     }

// //     if (hasColor) {
// //       console.log(rowText);
// //     }
// //   }
// // }

// // readExcel().catch(console.error);

// const fs = require("fs");
// const ExcelJS = require("exceljs");

// const outputPath = "./Job-hustle2.xlsx";
// if (!fs.existsSync(outputPath)) {
//   console.error("‚ùå File not found:", outputPath);
//   process.exit(1);
// }
// console.log("‚úÖ File found:", outputPath);

// async function readExcel() {
//   const workbook = new ExcelJS.Workbook();
//   await workbook.xlsx.readFile(outputPath);
//   const sheet = workbook.worksheets[0];

//   console.log("üìñ Reading sheet:", sheet.name);

//   const startRow = 1;
//   const endRow = 3576;
//   const tableData = [];
//   const consoleTableData = [];

//   for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {
//     const row = sheet.getRow(rowIndex);
//     let hasColor = false;
//     let rowData = { Row: rowIndex };
//     let consoleRow = [`Row ${rowIndex}`]; 

//     for (let colIndex = 2; colIndex <= 4; colIndex++) { // Skipping Col 1
//       const cell = row.getCell(colIndex);
//       const value = cell.value || "(empty)";
//       rowData[`Col${colIndex}`] = value;
//       consoleRow.push(value); 

//       const fill = cell.fill;
//       if (fill && fill.fgColor && fill.fgColor.argb !== "FFFFFFFF") {
//         hasColor = true;
//       }
//     }

//     if (hasColor) {
//       tableData.push(rowData);
//       consoleTableData.push(consoleRow);
//     }
//   }

//   fs.writeFileSync("output.json", JSON.stringify(tableData, null, 2));
//   console.log("‚úÖ Data written to output.json");

//   if (consoleTableData.length > 0) {
//     console.log("\nüìä Extracted Data:\n");

//     // Print Header Row (Skipping Col 1)
//     console.log("Row  | Col 2          | Col 3          | Col 4          ");
//     console.log("-----------------------------------------------------");

//     // Print Each Data Row
//     consoleTableData.forEach(row => {
//       console.log(row.join(" | "));
//     });

//   } else {
//     console.log("‚ö†Ô∏è No highlighted rows found in the given range.");
//   }

//   console.log("\nüì¢ Now, open 'output.html' in a browser to view the data.");
//   console.log("üöÄ Make sure output.json is in the same directory as output.html.");
// }

// readExcel().catch(console.error);

const fs = require("fs");
const ExcelJS = require("exceljs");
const readline = require("readline");

const outputPath = "./Job-hustle2.xlsx";
if (!fs.existsSync(outputPath)) {
  console.error("‚ùå File not found:", outputPath);
  process.exit(1);
}
console.log("‚úÖ File found:", outputPath);

// Function to prompt user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// Function to read Excel and process data
async function readExcel(filterOption) {
  const workbook = new ExcelJS.Workbook();
  await workbook.xlsx.readFile(outputPath);
  const sheet = workbook.worksheets[0];

  console.log("üìñ Reading sheet:", sheet.name);

  const startRow = 1;
  const endRow = 3576;
  const tableData = [];
  const consoleTableData = [];

  for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {
    const row = sheet.getRow(rowIndex);
    let hasColor = false;
    let rowData = { Row: rowIndex };
    let consoleRow = [`Row ${rowIndex}`];

    for (let colIndex = 2; colIndex <= 4; colIndex++) {
      const cell = row.getCell(colIndex);
      const value = cell.value || "(empty)";
      rowData[`Col${colIndex}`] = value;
      consoleRow.push(value);

      // Check for cell background color
      const fill = cell.fill;
      if (fill && fill.fgColor && fill.fgColor.argb !== "FFFFFFFF") {
        hasColor = true;
      }
    }

    // Apply filter based on user choice
    if (filterOption === "all" || (filterOption === "highlighted" && hasColor)) {
      tableData.push(rowData);
      consoleTableData.push(consoleRow);
    }
  }

  // Save to JSON file
  fs.writeFileSync("output.json", JSON.stringify(tableData, null, 2));
  console.log(`‚úÖ Data (${filterOption}) written to output.json`);

  // Print table preview
  if (consoleTableData.length > 0) {
    console.log("\nüìä Extracted Data:\n");
    console.log("Row  | Col 2          | Col 3          | Col 4          ");
    console.log("-----------------------------------------------------");
    consoleTableData.forEach(row => console.log(row.join(" | ")));
  } else {
    console.log("‚ö†Ô∏è No matching rows found.");
  }

  console.log("\nüì¢ Open 'output.html' in a browser to view the data.");
  console.log("üöÄ Ensure output.json is in the same directory as output.html.");
  rl.close();
}

// Ask the user what they want to see
rl.question(
  "Which rows do you want to see? (1) All Rows or (2) Highlighted Rows: ",
  (answer) => {
    if (answer === "1") {
      readExcel("all");
    } else if (answer === "2") {
      readExcel("highlighted");
    } else {
      console.log("‚ùå Invalid choice. Please restart and select 1 or 2.");
      rl.close();
    }
  }
);


==========================================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Excel Data</title>
    <link rel="stylesheet" href="./styles.css" />
</head>
<body>
    <div class="container">
        <h2>Excel Data</h2>
        <input type="text" id="searchInput" class="search-input" placeholder="üîç Search..." onkeyup="filterTable()" />
        <div id="resultsCount" class="results-count"></div>
        
        <button id="deleteSelected" class="delete-btn" onclick="deleteSelectedRows()">üóëÔ∏è Delete Selected</button>
        
        <table class="data-table">
            <thead>
                <tr>
                    <th><input type="checkbox" id="selectAll" onclick="toggleSelectAll(this)" /></th>
                    <th onclick="sortTable('Row')">Row ‚¨ç</th>
                    <th onclick="sortTable('Col2')">Col 2 ‚¨ç</th>
                    <th onclick="sortTable('Col3')">Col 3 ‚¨ç</th>
                    <th onclick="sortTable('Col4')">Col 4 ‚¨ç</th>
                </tr>
            </thead>
            <tbody id="table-body"></tbody>
        </table>
    </div>
    
    <button id="goBottom" class="scroll-btn" onclick="scrollToBottom()">‚¨áÔ∏è</button>
    <button id="goTop" class="scroll-btn" onclick="scrollToTop()">‚¨ÜÔ∏è</button>
    
    <script>
        let tableData = [];
        let sortOrder = {}; 

        fetch("output.json")
            .then(response => response.json())
            .then(data => {
                tableData = data;
                renderTable(data);
                updateResultsCount(data.length);
            })
            .catch(error => console.error("‚ùå Failed to load data:", error));

        function renderTable(data, highlight = "") {
            const tableBody = document.getElementById("table-body");
            tableBody.innerHTML = "";
            data.forEach((row, index) => {
                let tr = document.createElement("tr");
                tr.innerHTML = `
                    <td><input type="checkbox" class="rowCheckbox" data-index="${index}" /></td>
                    <td>${row.Row || "(empty)"}</td>
                    <td>${highlightText(row.Col2, highlight)}</td>
                    <td>${highlightText(row.Col3, highlight)}</td>
                    <td>${highlightText(row.Col4, highlight)}</td>
                `;
                tableBody.appendChild(tr);
            });
        }

        function filterTable() {
            const searchValue = document.getElementById("searchInput").value.toLowerCase().trim();
            if (!searchValue) {
                renderTable(tableData);
                updateResultsCount(tableData.length);
                return;
            }
            const filteredData = tableData.filter(row =>
                Object.values(row).some(value =>
                    String(value || "").toLowerCase().includes(searchValue)
                )
            );
            renderTable(filteredData, searchValue);
            updateResultsCount(filteredData.length);
        }

        function highlightText(text, searchValue) {
            if (!searchValue || !text) return text || "(empty)";
            const regex = new RegExp(`(${searchValue})`, "gi");
            return text.replace(regex, `<span class="highlight">$1</span>`);
        }

        function updateResultsCount(count) {
            document.getElementById("resultsCount").textContent = `Total results found: ${count}`;
        }

        function scrollToBottom() {
            window.scrollTo({ top: document.body.scrollHeight, behavior: "smooth" });
        }
        
        function scrollToTop() {
            window.scrollTo({ top: 0, behavior: "smooth" });
        }

        function toggleSelectAll(checkbox) {
            const checkboxes = document.querySelectorAll(".rowCheckbox");
            checkboxes.forEach(cb => cb.checked = checkbox.checked);
        }

        function deleteSelectedRows() {
            const selectedIndexes = [...document.querySelectorAll(".rowCheckbox:checked")].map(cb => parseInt(cb.dataset.index));
            tableData = tableData.filter((_, index) => !selectedIndexes.includes(index));
            renderTable(tableData);
            updateResultsCount(tableData.length);
        }

        function sortTable(column) {
            sortOrder[column] = !sortOrder[column];
            tableData.sort((a, b) => {
                let valA = a[column] ? a[column].toString().toLowerCase() : "";
                let valB = b[column] ? b[column].toString().toLowerCase() : "";
                return sortOrder[column] ? valA.localeCompare(valB) : valB.localeCompare(valA);
            });
            renderTable(tableData);
        }
    </script>
</body>
</html>

